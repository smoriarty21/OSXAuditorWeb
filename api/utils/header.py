import os
import log
import core
import time

__description__ = 'OS X Auditor'
__author__ = 'Atarimaster & @Jipe_'
__version__ = '0.5.0'

ROOT_PATH = '/'

Euid = str(os.geteuid())
Egid = str(os.getegid())

def generate_header():
    header = {}

    # Description(Audited By)
    description = "Report generated by " + __description__ + " v" + __version__ + " on " + time.strftime('%x %X %Z') + " running as " + Euid + "/" + Egid
    header['description'] = description

    # Audited Path
    audit_path = "Audited system path: " + ROOT_PATH.decode("utf-8")
    header['audit_path'] = audit_path

    # System Version
    AuditedSystemVersion = GetAuditedSystemVersion()
    sysv = "Version of the audited system: " + AuditedSystemVersion
    header['system_version'] = sysv

    # Current Timezone
    Timezone = GetAuditedSystemTimezone()
    tz = "Current timezone of the audited system: " + Timezone
    header['timezone'] = tz

    return header

def GetAuditedSystemVersion():
    global OSX_VERSION

    SysVersion = "Unknown system version"
    SystemVersionPlist = False

    SystemVersionPlist = core.UniversalReadPlist("/System/Library/CoreServices/SystemVersion.plist")

    if SystemVersionPlist:
        if "ProductName" in SystemVersionPlist: SysVersion = SystemVersionPlist["ProductName"]
        if "ProductVersion" in SystemVersionPlist: SysVersion += " " + SystemVersionPlist["ProductVersion"]
        if "ProductBuildVersion" in SystemVersionPlist: SysVersion += " build " + SystemVersionPlist["ProductBuildVersion"]

        OSX_VERSION = {
            "ProductBuildVersion": SystemVersionPlist["ProductBuildVersion"],
            "ProductVersion": SystemVersionPlist["ProductVersion"],
            "MajorVersion": int(SystemVersionPlist["ProductVersion"].split('.')[0]),
            "MinorVersion": int(SystemVersionPlist["ProductVersion"].split('.')[1]),
            "PatchVersion": int(SystemVersionPlist["ProductVersion"].split('.')[2])
        }

    else:
        log.PrintAndLog(u"Cannot determine the system version", "ERROR")

    return SysVersion

def GetAuditedSystemTimezone():
    """ Return the current system timezone """

    Timezone = False
    try:
        Timezone = os.path.realpath(os.path.join(ROOT_PATH, "etc/localtime"))
        Timezone = Timezone.split("/")
    except Exception as e:
        PrintAndLog(u"Cannot read the timezone" + str(e.args).decode("utf-8"), "ERROR")

    return Timezone[-2] + "/" + Timezone[-1]